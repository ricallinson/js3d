let points = [
    7.998, -27.729, -43.551,
    11.120, -23.468, -43.773,
    13.189, -17.656, -44.007,
    13.955, -10.992, -44.179,
    13.327, -4.280, -44.247,
    11.379, 1.667, -44.220,
    8.347, 6.129, -44.146,
    4.597, 8.566, -44.086,
    4.200, -29.932, -43.420,
    12.929, -41.997, -37.536,
    18.796, -34.157, -38.187,
    22.685, -23.442, -38.837,
    24.125, -11.133, -39.246,
    22.944, 1.274, -39.296,
    19.284, 12.266, -39.036,
    13.586, 20.507, -38.654,
    6.538, 25.005, -38.378,
    5.791, -46.043, -37.142,
    16.589, -51.547, -28.916,
    24.494, -41.298, -30.003,
    29.733, -27.263, -31.067,
    31.674, -11.115, -31.693,
    30.083, 5.173, -31.684,
    25.151, 19.597, -31.139,
    17.475, 30.397, -30.400,
    7.979, 36.801, -30.984,
    6.972, -56.827, -28.253,
    18.537, -55.408, -19.064,
    27.526, -44.153, -20.396,
    33.483, -28.343, -19.230,
    35.690, -10.952, -22.432,
    33.881, 7.122, -20.043,
    28.273, 22.846, -21.658,
    19.544, 34.719, -20.706,
    8.745, 43.408, -20.653,
    7.600, -61.200, -18.249,
    18.537, -53.596, -9.330,
    27.526, -41.594, -7.586,
    33.483, -27.833, -11.864,
    35.690, -10.681, -12.580,
    33.881, 6.623, -12.527,
    28.273, 21.938, -11.833,
    19.544, 33.396, -10.914,
    8.745, 42.169, -11.137,
    7.600, -64.346, -9.230,
    16.589, -46.869, -0.818,
    24.494, -37.607, -1.799,
    29.733, -24.927, -2.759,
    31.674, -10.344, -3.324,
    30.083, 4.361, -3.315,
    28.198, 17.494, -4.240,
    17.475, 26.639, -0.752,
    7.979, 36.535, -0.720,
    6.972, -51.641, 2.187,
    12.929, -36.389, 5.678,
    18.796, -29.679, 5.123,
    22.685, -20.511, 4.568,
    24.125, -9.984, 4.218,
    22.944, 0.624, 4.177,
    17.930, 13.069, 6.256,
    19.002, 18.575, 1.942,
    5.791, -39.852, 6.015,
    7.998, -23.563, 9.432,
    11.120, -19.820, 9.810,
    13.189, -15.135, 9.841,
    13.955, -9.635, 9.700,
    13.471, 0.600, 9.552,
    9.866, 10.843, 10.152,
    0.581, 6.374, 9.892,
    0.183, -26.742, 9.198,
    4.200, -26.839, 9.204,
    7.992, 36.954, 14.728,
    10.152, 29.862, 12.532,
    8.404, 24.533, 12.892,
    5.676, 19.588, 13.414,
    4.962, 40.723, 14.728,
    12.827, 41.716, 19.355,
    15.009, 32.439, 19.355,
    13.541, 22.897, 19.355,
    8.816, 15.648, 19.355,
    6.815, 48.244, 19.738,
    14.597, 43.304, 27.939,
    17.117, 32.591, 27.939,
    15.422, 21.574, 27.939,
    9.966, 13.203, 27.939,
    7.007, 50.841, 27.229,
    12.827, 41.716, 36.523,
    15.009, 32.439, 36.523,
    13.541, 22.897, 36.523,
    8.816, 15.648, 36.523,
    7.580, 48.244, 36.523,
    7.992, 37.378, 42.807,
    9.252, 32.022, 42.807,
    8.404, 26.513, 42.807,
    5.676, 22.328, 42.807,
    4.962, 41.147, 42.807,
    -8.453, -27.729, -43.551,
    -11.574, -23.468, -43.773,
    -13.643, -17.656, -44.007,
    -14.410, -10.992, -44.179,
    -13.782, -4.280, -44.247,
    -11.834, 1.667, -44.220,
    -8.802, 6.129, -44.146,
    -5.052, 8.566, -44.086,
    -4.654, -29.932, -43.420,
    -13.384, -41.997, -37.536,
    -19.251, -34.157, -38.187,
    -23.140, -23.442, -38.837,
    -24.580, -11.133, -39.246,
    -23.399, 1.274, -39.296,
    -19.739, 12.266, -39.036,
    -14.041, 20.507, -38.654,
    -6.993, 25.005, -38.378,
    -6.245, -46.043, -37.142,
    -17.044, -51.547, -28.916,
    -24.949, -41.298, -30.003,
    -30.188, -27.263, -31.067,
    -32.129, -11.115, -31.693,
    -30.537, 5.173, -31.684,
    -25.606, 19.597, -31.139,
    -17.929, 30.397, -30.400,
    -8.433, 36.801, -30.984,
    -7.426, -56.827, -28.253,
    -18.992, -55.408, -19.064,
    -27.981, -44.153, -20.396,
    -33.938, -28.722, -21.690,
    -36.145, -10.952, -22.432,
    -34.336, 6.976, -22.378,
    -28.728, 22.846, -21.658,
    -19.998, 34.719, -20.706,
    -9.200, 43.408, -20.653,
    -8.055, -61.200, -18.249,
    -18.992, -53.596, -9.330,
    -27.981, -42.729, -10.615,
    -33.938, -32.453, -12.194,
    -36.145, -10.681, -12.580,
    -34.336, 6.623, -12.527,
    -28.728, 21.937, -11.833,
    -19.998, 33.396, -10.914,
    -9.200, 42.169, -11.137,
    -8.055, -64.002, -9.574,
    -17.044, -46.869, -0.818,
    -24.949, -37.607, -1.799,
    -30.188, -24.927, -2.759,
    -32.129, -10.344, -3.324,
    -30.537, 4.361, -3.315,
    -28.653, 17.494, -4.240,
    -17.929, 26.639, -0.752,
    -8.433, 36.535, -0.720,
    -7.427, -51.641, 2.187,
    -13.384, -36.389, 5.678,
    -19.251, -29.679, 5.123,
    -23.140, -20.511, 4.568,
    -24.580, -9.984, 4.218,
    -23.399, 0.624, 4.177,
    -18.385, 13.069, 6.256,
    -19.457, 18.575, 1.942,
    -6.245, -39.852, 6.015,
    -8.453, -23.563, 9.432,
    -11.574, -19.820, 9.810,
    -13.643, -15.135, 9.729,
    -14.410, -9.635, 9.700,
    -14.069, 0.600, 9.552,
    -9.944, 10.543, 10.141,
    -4.654, -26.839, 9.204,
    -8.447, 36.954, 14.728,
    -11.507, 29.682, 12.532,
    -8.859, 24.533, 13.072,
    -6.131, 19.588, 13.414,
    -0.097, 15.108, 14.442,
    -1.429, 41.894, 14.728,
    -5.417, 40.723, 14.728,
    -13.282, 41.716, 19.355,
    -15.464, 32.439, 19.355,
    -13.996, 22.897, 19.355,
    -9.271, 15.648, 19.355,
    -2.556, 12.633, 19.355,
    -1.182, 50.272, 18.208,
    -8.144, 48.244, 20.011,
    -15.052, 43.304, 27.939,
    -17.572, 32.591, 27.939,
    -15.876, 21.574, 27.939,
    -10.421, 13.203, 27.939,
    -2.666, 9.722, 27.939,
    -1.072, 53.183, 29.142,
    -8.118, 50.841, 27.229,
    -13.282, 41.716, 36.523,
    -15.464, 32.439, 36.523,
    -13.996, 22.897, 36.523,
    -9.271, 15.648, 36.523,
    -2.556, 12.633, 36.523,
    -1.128, 50.272, 36.523,
    -8.035, 48.244, 36.523,
    -8.447, 37.378, 42.807,
    -9.707, 32.022, 42.807,
    -8.859, 26.513, 42.807,
    -6.131, 22.328, 42.807,
    -2.254, 20.587, 42.807,
    -1.429, 42.318, 42.807,
    -5.417, 41.147, 42.807,
    -1.842, 31.453, 45.107,
    8.879, 49.542, 23.647,
    -10.044, 49.542, 23.593,
    -5.169, 52.012, 28.650,
    3.596, 52.012, 28.650,
    3.007, 49.258, 18.700,
    -4.581, 49.258, 18.809,
    6.110, 54.210, 18.989,
    6.739, 56.808, 26.088,
    -1.364, 56.239, 17.677,
    -8.064, 54.210, 19.132,
    -1.341, 59.150, 28.001,
    -8.387, 56.808, 26.088,
    8.610, 55.509, 22.507,
    -10.313, 55.509, 22.452,
    -5.438, 57.979, 27.509,
    3.328, 57.979, 27.509,
    2.260, 55.225, 17.864,
    -4.719, 55.225, 18.017,
    4.276, 66.344, 20.176,
    4.719, 67.566, 24.935,
    -1.157, 66.567, 19.333,
    -6.359, 66.161, 20.243,
    -1.167, 69.220, 26.307,
    -6.472, 67.050, 24.935,
    6.983, 64.461, 22.322,
    -8.391, 64.547, 22.326,
    -4.237, 68.651, 25.954,
    2.234, 68.823, 25.954,
    1.632, 66.757, 19.643,
    -3.981, 66.241, 19.590,
    2.826, 73.446, 25.261,
    0.872, 74.494, 25.433,
    -1.294, 74.861, 25.522,
    -2.914, 74.408, 25.302,
    -4.445, 73.229, 25.300,
    26.010, -40.168, -6.207,
    30.505, -35.614, -13.669,
    30.505, -35.281, -11.240,
    33.483, -28.277, -16.777,
    32.712, -19.108, -24.289,
    34.587, -19.837, -22.061,
    34.786, -1.988, -22.405,
    32.777, -1.880, -24.575,
    31.982, 6.075, -27.031,
    33.881, 6.508, -17.890,
    31.077, 14.280, -12.180,
    32.479, 11.765, -12.354,
    -33.938, -29.267, -18.592,
    -35.042, -19.837, -22.061,
    -34.137, -11.034, -24.753,
    -32.437, 6.570, -24.391,
    -28.728, 22.392, -16.746,
    -31.532, 14.911, -22.018,
    -30.959, -34.621, -11.405,
    -35.042, -27.808, -17.148,
    7.600, -74.754, 5.883,
    16.589, -59.319, 1.151,
    6.972, -62.437, 4.391,
    -8.055, -74.754, 5.883,
    -17.044, -59.319, 1.151,
    -7.426, -63.125, 4.326,
    3.275, 36.977, 6.868,
    -4.931, 36.977, 6.868,
    -6.925, 36.392, 6.868,
    -8.440, 34.147, 6.688,
    -9.070, 31.649, 6.868,
    6.471, 36.031, 6.868,
    7.985, 34.507, 6.868,
    8.615, 31.649, 6.868
];

let tris = 
[0, 10, 9,
    0, 1, 10,
    1, 11, 10,
    1, 2, 11,
    2, 12, 11,
    2, 3, 12,
    3, 13, 12,
    3, 4, 13,
    4, 14, 13,
    4, 5, 14,
    5, 15, 14,
    5, 6, 15,
    6, 16, 15,
    6, 7, 16,
    8, 9, 17,
    8, 0, 9,
    9, 19, 18,
    9, 10, 19,
    10, 20, 19,
    10, 11, 20,
    11, 21, 20,
    11, 12, 21,
    12, 22, 21,
    12, 13, 22,
    13, 23, 22,
    13, 14, 23,
    14, 24, 23,
    14, 15, 24,
    15, 25, 24,
    15, 16, 25,
    17, 18, 26,
    17, 9, 18,
    18, 28, 27,
    18, 19, 28,
    19, 29, 28,
    19, 20, 29,
    240, 241, 29,
    20, 21, 240,
    21, 22, 243,
    22, 32, 244,
    22, 23, 32,
    23, 33, 32,
    23, 24, 33,
    24, 34, 33,
    24, 25, 34,
    26, 27, 35,
    26, 18, 27,
    27, 37, 36,
    27, 28, 37,
    237, 238, 37,
    28, 29, 237,
    239, 241, 30,
    30, 39, 38,
    30, 40, 39,
    242, 245, 40,
    31, 41, 246,
    31, 32, 41,
    32, 42, 41,
    32, 33, 42,
    33, 43, 42,
    33, 34, 43,
    35, 36, 44,
    35, 27, 36,
    36, 46, 45,
    36, 236, 46,
    236, 238, 38,
    38, 47, 46,
    38, 48, 47,
    38, 39, 48,
    39, 49, 48,
    39, 40, 49,
    40, 50, 49,
    246, 41, 50,
    41, 51, 50,
    41, 42, 51,
    42, 52, 51,
    42, 43, 52,
    256, 257, 258,
    44, 36, 45,
    45, 55, 54,
    45, 46, 55,
    46, 56, 55,
    46, 47, 56,
    56, 47, 48,
    48, 57, 56,
    48, 58, 57,
    48, 49, 58,
    49, 59, 58,
    49, 50, 59,
    50, 60, 59,
    50, 51, 60,
    53, 54, 61,
    53, 45, 54,
    54, 63, 62,
    54, 55, 63,
    55, 64, 63,
    55, 56, 64,
    56, 65, 64,
    56, 57, 65,
    57, 66, 65,
    57, 58, 66,
    58, 67, 66,
    58, 59, 67,
    61, 62, 70,
    61, 54, 62,
    71, 76, 77,
    71, 77, 72,
    72, 77, 78,
    72, 78, 73,
    73, 78, 79,
    73, 79, 74,
    74, 79, 176,
    74, 176, 169,
    170, 205, 80,
    170, 80, 75,
    75, 80, 76,
    75, 76, 71,
    76, 81, 82,
    76, 82, 77,
    77, 82, 83,
    77, 83, 78,
    78, 83, 84,
    78, 84, 79,
    79, 84, 183,
    79, 183, 176,
    220, 225, 231,
    229, 221, 231,
    201, 85, 81,
    80, 81, 76,
    81, 86, 87,
    81, 87, 82,
    82, 87, 88,
    82, 88, 83,
    83, 88, 89,
    83, 89, 84,
    84, 89, 190,
    84, 190, 183,
    184, 191, 90,
    184, 90, 204,
    85, 90, 86,
    85, 86, 81,
    86, 91, 92,
    86, 92, 87,
    87, 92, 93,
    87, 93, 88,
    88, 93, 94,
    88, 94, 89,
    89, 94, 197,
    89, 197, 190,
    191, 198, 95,
    191, 95, 90,
    90, 95, 91,
    90, 91, 86,
    200, 95, 198,
    200, 197, 94,
    200, 94, 93,
    200, 93, 92,
    200, 92, 91,
    200, 91, 95,
    268, 71, 72,
    72, 51, 269,
    51, 72, 73,
    73, 60, 51,
    60, 73, 74,
    74, 59, 60,
    59, 74, 169,
    169, 67, 59,
    267, 75, 71,
    262, 170, 75,
    105, 106, 96,
    106, 97, 96,
    106, 107, 97,
    107, 98, 97,
    107, 108, 98,
    108, 99, 98,
    108, 109, 99,
    109, 100, 99,
    109, 110, 100,
    110, 101, 100,
    110, 111, 101,
    111, 102, 101,
    111, 112, 102,
    112, 103, 102,
    113, 105, 104,
    105, 96, 104,
    114, 115, 105,
    115, 106, 105,
    115, 116, 106,
    116, 107, 106,
    116, 117, 107,
    117, 108, 107,
    117, 118, 108,
    118, 109, 108,
    118, 119, 109,
    119, 110, 109,
    119, 120, 110,
    120, 111, 110,
    120, 121, 111,
    121, 112, 111,
    122, 114, 113,
    114, 105, 113,
    123, 124, 114,
    124, 115, 114,
    124, 125, 115,
    125, 116, 115,
    249, 126, 250,
    250, 117, 116,
    126, 127, 250,
    251, 118, 117,
    253, 128, 251,
    128, 119, 118,
    128, 129, 119,
    129, 120, 119,
    129, 130, 120,
    130, 121, 120,
    131, 123, 122,
    123, 114, 122,
    132, 133, 123,
    133, 124, 123,
    254, 134, 248,
    248, 125, 124,
    134, 135, 255,
    126, 248, 255,
    135, 136, 126,
    136, 127, 126,
    136, 137, 127,
    252, 253, 127,
    137, 138, 252,
    138, 129, 128,
    138, 139, 129,
    139, 130, 129,
    140, 132, 131,
    132, 123, 131,
    141, 142, 132,
    142, 133, 132,
    142, 143, 134,
    254, 133, 142,
    143, 144, 134,
    144, 135, 134,
    144, 145, 135,
    145, 136, 135,
    145, 146, 136,
    146, 137, 136,
    146, 147, 137,
    147, 138, 137,
    147, 148, 138,
    148, 139, 138,
    261, 260, 259,
    141, 132, 140,
    150, 151, 141,
    151, 142, 141,
    151, 152, 142,
    152, 143, 142,
    152, 153, 143,
    153, 144, 143,
    153, 154, 144,
    154, 145, 144,
    154, 155, 145,
    155, 146, 145,
    155, 156, 146,
    156, 147, 146,
    157, 150, 149,
    150, 141, 149,
    158, 159, 150,
    159, 151, 150,
    159, 160, 151,
    160, 152, 151,
    160, 161, 152,
    161, 153, 152,
    161, 162, 153,
    162, 154, 153,
    162, 163, 154,
    163, 155, 154,
    164, 158, 157,
    158, 150, 157,
    173, 172, 165,
    166, 173, 165,
    174, 173, 166,
    167, 174, 166,
    175, 174, 167,
    168, 175, 167,
    176, 175, 168,
    169, 176, 168,
    206, 177, 170,
    171, 178, 170,
    172, 178, 171,
    165, 172, 171,
    180, 179, 172,
    173, 180, 172,
    181, 180, 173,
    174, 181, 173,
    182, 181, 174,
    175, 182, 174,
    183, 182, 175,
    176, 183, 175,
    234, 227, 223,
    224, 227, 235,
    179, 202, 178,
    172, 179, 178,
    187, 186, 179,
    180, 187, 179,
    188, 187, 180,
    181, 188, 180,
    189, 188, 181,
    182, 189, 181,
    190, 189, 182,
    183, 190, 182,
    192, 191, 184,
    185, 192, 203,
    186, 192, 185,
    179, 186, 185,
    194, 193, 186,
    187, 194, 186,
    195, 194, 187,
    188, 195, 187,
    196, 195, 188,
    189, 196, 188,
    197, 196, 189,
    190, 197, 189,
    199, 198, 191,
    192, 199, 191,
    193, 199, 192,
    186, 193, 192,
    198, 199, 200,
    196, 197, 200,
    195, 196, 200,
    194, 195, 200,
    193, 194, 200,
    199, 193, 200,
    166, 265, 266,
    148, 147, 266,
    167, 166, 147,
    147, 156, 167,
    168, 167, 156,
    156, 155, 168,
    169, 168, 155,
    155, 163, 169,
    165, 264, 265,
    171, 263, 264,
    34, 130, 139,
    34, 139, 43,
    43, 139, 148,
    43, 148, 52,
    34, 121, 130,
    25, 121, 34,
    16, 112, 121,
    16, 121, 25,
    7, 112, 16,
    7, 103, 112,
    259, 256, 258,
    259, 258, 261,
    140, 131, 44,
    131, 35, 44,
    131, 26, 35,
    122, 26, 131,
    122, 17, 26,
    113, 17, 122,
    149, 53, 61,
    149, 61, 157,
    104, 8, 113,
    113, 8, 17,
    163, 67, 169,
    163, 66, 67,
    162, 66, 163,
    162, 65, 66,
    162, 161, 65,
    161, 160, 65,
    160, 64, 65,
    160, 159, 64,
    159, 63, 64,
    159, 158, 63,
    158, 62, 63,
    164, 62, 158,
    164, 70, 62,
    157, 70, 164,
    157, 61, 70,
    52, 148, 262,
    231, 228, 220,
    80, 201, 81,
    222, 226, 235,
    179, 185, 202,
    234, 221, 230,
    203, 192, 184,
    233, 223, 232,
    204, 90, 85,
    170, 177, 205,
    219, 229, 231,
    178, 206, 170,
    235, 230, 222,
    216, 204, 85,
    85, 208, 216,
    208, 85, 201,
    201, 213, 208,
    217, 205, 177,
    177, 209, 217,
    215, 203, 184,
    184, 211, 215,
    214, 202, 185,
    185, 212, 214,
    212, 185, 203,
    203, 215, 212,
    210, 178, 202,
    202, 214, 210,
    218, 206, 178,
    178, 210, 218,
    209, 177, 206,
    206, 218, 209,
    211, 184, 204,
    204, 216, 211,
    213, 201, 80,
    80, 207, 213,
    207, 80, 205,
    205, 217, 207,
    228, 216, 208,
    208, 220, 228,
    220, 208, 213,
    213, 225, 220,
    229, 217, 209,
    209, 221, 229,
    227, 215, 211,
    211, 223, 227,
    226, 214, 212,
    212, 224, 226,
    224, 212, 215,
    215, 227, 224,
    222, 210, 214,
    214, 226, 222,
    230, 218, 210,
    210, 222, 230,
    221, 209, 218,
    218, 230, 221,
    223, 211, 216,
    216, 228, 223,
    225, 213, 207,
    207, 219, 225,
    219, 207, 217,
    217, 229, 219,
    231, 232, 228,
    231, 225, 219,
    232, 223, 228,
    231, 221, 232,
    223, 233, 234,
    221, 233, 232,
    234, 233, 221,
    227, 234, 235,
    235, 226, 224,
    235, 234, 230,
    36, 37, 236,
    46, 236, 38,
    28, 237, 37,
    239, 38, 238,
    238, 237, 239,
    236, 37, 238,
    38, 239, 30,
    237, 29, 239,
    20, 240, 29,
    239, 29, 241,
    243, 31, 242,
    30, 242, 40,
    243, 244, 31,
    244, 32, 31,
    243, 22, 244,
    240, 30, 241,
    240, 243, 30,
    30, 243, 242,
    240, 21, 243,
    242, 31, 245,
    245, 247, 40,
    247, 246, 50,
    246, 245, 31,
    245, 246, 247,
    40, 247, 50,
    248, 124, 254,
    249, 125, 248,
    125, 249, 116,
    126, 249, 248,
    250, 116, 249,
    250, 127, 251,
    251, 117, 250,
    251, 128, 118,
    137, 252, 127,
    252, 138, 128,
    127, 253, 251,
    252, 128, 253,
    133, 254, 124,
    134, 254, 142,
    255, 135, 126,
    255, 248, 134,
    256, 44, 45,
    45, 257, 256,
    257, 45, 53,
    53, 258, 257,
    261, 149, 141,
    141, 260, 261,
    260, 141, 140,
    140, 259, 260,
    259, 140, 44,
    44, 256, 259,
    258, 53, 149,
    149, 261, 258,
    52, 262, 267,
    262, 263, 170,
    171, 170, 263,
    262, 148, 263,
    165, 171, 264,
    264, 263, 148,
    166, 165, 265,
    265, 264, 148,
    266, 265, 148,
    266, 147, 166,
    52, 267, 268,
    267, 262, 75,
    52, 268, 269,
    268, 267, 71,
    269, 51, 52,
    269, 268, 72
];

// swap y and z
for (let i = 0; i < points.length; i += 3) {
    const temp = points[i + 1];
    points[i + 1] = -points[i + 2];
    points[i + 2] = temp;
}

// find largest absolute value of all x,y or z values
const largest = Math.max(...points.map(p => {return Math.abs(p);}));

// normalize points to 1x1x1 bounding box (is this right?)
points = points.map(function(p) {
    return p / largest;
});

const canvas = document.getElementById("cnv");
canvas.width = 600;
canvas.height = 450;

const centerX = canvas.width / 2;
const centerY = canvas.height / 2;

const ctx = canvas.getContext("2d", { alpha: false });

let dist = 600; // view plane distance

// let light = {x: 0, y: 0, z: 1};
let light = { x: -0.913913, y: -0.389759, z: -0.113369 };

let normals = calcSurfaceNormals(tris);

let palette = randomPalette();
update();

function update(t) {
    let ang = t / 1000;
    const s = Math.sin(ang);
    const c = Math.cos(ang);
    light.x = s / 2; // rotate light around
    const wobble = Math.sin(t / 500);
    const z = 4 + wobble;
    const mat = [c, 0, s, c, 0, 1, 0, s / 4, -s, 0, c, z];
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    draw(points, tris, mat);
    drawPalette(palette);
    window.requestAnimationFrame(update);
}

function draw(points, tris, mat) {
    for (let i = 0; i < tris.length; i += 3) {
        const p0 = tris[i + 0] * 3;
        const p1 = tris[i + 1] * 3;
        const p2 = tris[i + 2] * 3;
        const a = vertexShader(points[p0], points[p0 + 1], points[p0 + 2], mat);
        const b = vertexShader(points[p1], points[p1 + 1], points[p1 + 2], mat);
        const c = vertexShader(points[p2], points[p2 + 1], points[p2 + 2], mat);
        const tri = i / 3; // which triangle is being processed
        fragmentShader(a, b, c, tri);
    }
}

function drawPalette(pal) {
    let colorR, colorG, colorB;
    const height = 20;
    for (let i = 0; i < palette.length; i += 3) {
        colorR = pal[i + 0];
        colorG = pal[i + 1];
        colorB = pal[i + 2];
        ctx.fillStyle = `rgb(${colorR}, ${colorG}, ${colorB})`;
        ctx.fillRect(
            centerX - 128 + (i / 3 + 3),
            canvas.height - (height + 3),
            1,
            height
        );
    }
}

function vertexShader(x, y, z, mat) {
    let x0 = mat[0] * x + mat[1] * y + mat[2] * z + mat[3];
    let y0 = mat[4] * x + mat[5] * y + mat[6] * z + mat[7];
    let z0 = mat[8] * x + mat[9] * y + mat[10] * z + mat[11];
    return [x0, y0, z0];
}

function persp(xory, z) {
    return dist * xory / z;
}

function fragmentShader(a, b, c, tri) {
    const x0 = centerX + persp(a[0], a[2]);
    const y0 = centerY + persp(a[1], a[2]);
    const x1 = centerX + persp(b[0], b[2]);
    const y1 = centerY + persp(b[1], b[2]);
    const x2 = centerX + persp(c[0], c[2]);
    const y2 = centerY + persp(c[1], c[2]);

    // cull backfacing triangles
    if ((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) > 0) return;

    ctx.beginPath();
    ctx.moveTo(x0, y0);
    ctx.lineTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.lineTo(x0, y0);
    // ctx.stroke();

    const norm = {
        x: normals[tri * 3 + 0],
        y: normals[tri * 3 + 1],
        z: normals[tri * 3 + 2]
    };

    const dotproduct = norm.x * light.x + norm.y * light.y + norm.z * light.z;
    const color = Math.floor(dotproduct * 127) + 126;
    let colorR = palette[color * 3 + 0] & 255;
    let colorG = palette[color * 3 + 1] & 255;
    let colorB = palette[color * 3 + 2] & 255;

    ctx.fillStyle = `rgb(${colorR}, ${colorG}, ${colorB})`;
    ctx.fill();
}

function calcSurfaceNormals(tris) {
    let normals = [];
    for (let i = 0; i < tris.length; i += 3) {
    // each point of triangle
        const p0 = tris[i + 0];
        const p1 = tris[i + 1];
        const p2 = tris[i + 2];

        // get point 0's x,y,z
        const p0x = points[p0 * 3 + 0];
        const p0y = points[p0 * 3 + 1];
        const p0z = points[p0 * 3 + 2];

        // get point 1's x,y,z
        const p1x = points[p1 * 3 + 0];
        const p1y = points[p1 * 3 + 1];
        const p1z = points[p1 * 3 + 2];

        // get point 2's x,y,z
        const p2x = points[p2 * 3 + 0];
        const p2y = points[p2 * 3 + 1];
        const p2z = points[p2 * 3 + 2];

        // make vector u from p1 and p0 (head - tail)
        const ux = p1x - p0x;
        const uy = p1y - p0y;
        const uz = p1z - p0z;

        // make vector v from p2 and p0 (head - tail)
        const vx = p2x - p0x;
        const vy = p2y - p0y;
        const vz = p2z - p0z;

        // cross product of u and v vectors to get perpendicular vector
        const normx = uy * vz - uz * vy;
        const normy = ux * vz - uz * vx;
        const normz = ux * vy - uy * vx;

        // get length of normal
        let magnitude = Math.sqrt(normx * normx + normy * normy + normz * normz);
        if (magnitude === 0.0) magnitude = 0.001;

        // make unit vectors and add to array
        normals.push(normx / magnitude);
        normals.push(normy / magnitude);
        normals.push(normz / magnitude);
    }
    return normals;
}

function makePhongPalette(r, g, b, specAmount) {
    let palette = [];
    let angle = 90.0;
    const angleinc = 90.0 / 128;
    const deg2rad = Math.PI / 180;
    for (let n = 0; n < 256; n++) {
        const cosx = Math.cos(angle * deg2rad);
        let spec = Math.pow(cosx, 7);
        spec = spec * specAmount * 128;
        let red = r * cosx + spec;
        let green = g * cosx + spec;
        let blue = b * cosx + spec;
        if (red > 255) red = 255;
        if (green > 255) green = 255;
        if (blue > 255) blue = 255;
        palette.push(Math.floor(red));
        palette.push(Math.floor(green));
        palette.push(Math.floor(blue));
        angle = angle - angleinc;
    }
    return palette;
}

function randomPalette() {
    const randColor = {
        r: Math.floor(Math.random() * 128) + 128,
        g: Math.floor(Math.random() * 128) + 128,
        b: Math.floor(Math.random() * 128) + 128,
        s: Math.floor(Math.random() * 2 - 1) // specular
    };
    return makePhongPalette(randColor.r, randColor.g, randColor.b, randColor.s);
    // return makeLinearPalette();
}

// function lerp(a, b, t) {
//   return a * (1 - t) + b * t;
// }

// function makeLinearPalette(color1, color2) {
//   const palette = [];
//   for (let i = 0; i < 256; i++) {
//     palette.push(lerp(color1.r, color2.r, i / 255));
//     palette.push(lerp(color1.g, color2.g, i / 255));
//     palette.push(lerp(color1.b, color2.b, i / 255));
//   }
//   return palette;
// }

function setText(el, value) {
    if (el) {
        el.textContent = `Zoom (${value}):`;
    }
}

document.querySelector("#randomBtn").addEventListener("click", () => {
    palette = randomPalette();
});

const zoomLabel = document.querySelector("#zoomLabel");
setText(zoomLabel, dist);
const zoomSlider = document.querySelector("#zoomSlider");
zoomSlider.value = dist;
zoomSlider.addEventListener("input", e => {
    dist = e.target.value;
    setText(zoomLabel, e.target.value);
});

